{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220486b202101498e7f5e10d11271e3d5a8193800c7e1bb3bc5c24b75d714e32a9164736f6c63430008150033","sourceMap":"802:8830:71:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8830:71;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220486b202101498e7f5e10d11271e3d5a8193800c7e1bb3bc5c24b75d714e32a9164736f6c63430008150033","sourceMap":"802:8830:71:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"installed_contracts/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/MerkleProofUpgradeable.sol\":\"MerkleProofUpgradeable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=installed_contracts/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=installed_contracts/openzeppelin-contracts-5/contracts/\",\":@openzeppelin/contracts/=installed_contracts/openzeppelin-contracts/contracts/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=installed_contracts/forge-std/lib/ds-test/src/\",\":erc4626-tests/=installed_contracts/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":eth-infinitism-dev/=installed_contracts/eth-infinitism-dev/contracts/\",\":eth-infinitism/=installed_contracts/eth-infinitism/contracts/\",\":forge-std/=installed_contracts/forge-std/src/\",\":murky/=installed_contracts/murky/src/\",\":openzeppelin-contracts-5/=installed_contracts/openzeppelin-contracts-5/\",\":openzeppelin-contracts-upgradeable/=installed_contracts/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=installed_contracts/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=installed_contracts/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=installed_contracts/openzeppelin-contracts-upgradeable/contracts/\",\":solidity-stringutils/=installed_contracts/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\"]},\"sources\":{\"installed_contracts/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/MerkleProofUpgradeable.sol\":{\"keccak256\":\"0xb89d1b9c2f50f58a812202138ddb7dd147a2f8bb09846f4420cb4909dec62220\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://125d6353568da46a9c09ad2854a5ac08dffe0befaf991068d40775a2fe490682\",\"dweb:/ipfs/QmZuCkiiAnWm1LB3KxH71w7kJeDPWvDZM6xjyHoc5ihPwB\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.21+commit.d9974bed"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=installed_contracts/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=installed_contracts/openzeppelin-contracts-5/contracts/","@openzeppelin/contracts/=installed_contracts/openzeppelin-contracts/contracts/","@uniswap/=node_modules/@uniswap/","ds-test/=installed_contracts/forge-std/lib/ds-test/src/","erc4626-tests/=installed_contracts/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","eth-infinitism-dev/=installed_contracts/eth-infinitism-dev/contracts/","eth-infinitism/=installed_contracts/eth-infinitism/contracts/","forge-std/=installed_contracts/forge-std/src/","murky/=installed_contracts/murky/src/","openzeppelin-contracts-5/=installed_contracts/openzeppelin-contracts-5/","openzeppelin-contracts-upgradeable/=installed_contracts/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=installed_contracts/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=installed_contracts/openzeppelin-foundry-upgrades/src/","openzeppelin/=installed_contracts/openzeppelin-contracts-upgradeable/contracts/","solidity-stringutils/=installed_contracts/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"installed_contracts/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/MerkleProofUpgradeable.sol":"MerkleProofUpgradeable"},"evmVersion":"paris","libraries":{}},"sources":{"installed_contracts/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/MerkleProofUpgradeable.sol":{"keccak256":"0xb89d1b9c2f50f58a812202138ddb7dd147a2f8bb09846f4420cb4909dec62220","urls":["bzz-raw://125d6353568da46a9c09ad2854a5ac08dffe0befaf991068d40775a2fe490682","dweb:/ipfs/QmZuCkiiAnWm1LB3KxH71w7kJeDPWvDZM6xjyHoc5ihPwB"],"license":"MIT"}},"version":1},"id":71}