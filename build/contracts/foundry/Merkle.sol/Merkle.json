{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "node",
          "type": "uint256"
        }
      ],
      "name": "getProof",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "getRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeafPairs",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "log2ceil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "log2ceilBitMagic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "valueToProve",
          "type": "bytes32"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b506108f0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e08d6021461006757806358161a421461008d578063b8616195146100b0578063cf06c7b7146100d0578063dd1d2599146100e3578063e27d5153146100f6575b600080fd5b61007a61007536600461072d565b610109565b6040519081526020015b60405180910390f35b6100a061009b36600461076a565b6101a9565b6040519015158152602001610084565b6100c36100be3660046107ba565b6101f3565b60405161008491906107ff565b61007a6100de366004610843565b61037a565b61007a6100f136600461085c565b6104b7565b61007a610104366004610843565b6104e5565b6000600182511161016d5760405162461bcd60e51b815260206004820152602360248201527f776f6e27742067656e657261746520726f6f7420666f722073696e676c65206c60448201526232b0b360e91b60648201526084015b60405180910390fd5b6001825111156101875761018082610510565b915061016d565b8160008151811061019a5761019a61087e565b60200260200101519050919050565b81516000908290825b818110156101e7576101dd838783815181106101d0576101d061087e565b60200260200101516104b7565b92506001016101b2565b50509093149392505050565b606060018351116102525760405162461bcd60e51b8152602060048201526024808201527f776f6e27742067656e65726174652070726f6f6620666f722073696e676c65206044820152633632b0b360e11b6064820152608401610164565b600061025e845161037a565b67ffffffffffffffff8111156102765761027661067c565b60405190808252806020026020018201604052801561029f578160200160208202803683370190505b50905060005b6001855111156103725783600116600114156102fb578460018503815181106102d0576102d061087e565b60200260200101518282815181106102ea576102ea61087e565b602002602001018181525050610359565b845184600101141561031d576000801b8282815181106102ea576102ea61087e565b8484600101815181106103325761033261087e565b602002602001015182828151811061034c5761034c61087e565b6020026020010181815250505b60010160028404935061036b85610510565b94506102a5565b509392505050565b60006001821161038c57506000919050565b600082600160801b81106103ad57608093841c936103aa9083610894565b91505b6801000000000000000084106103d057604093841c936103cd9083610894565b91505b64010000000084106103ef57602093841c936103ec9083610894565b91505b62010000841061040c57601093841c936104099083610894565b91505b610100841061042857600893841c936104259083610894565b91505b6010841061044357600493841c936104409083610894565b91505b6004841061045e57600293841c9361045b9083610894565b91505b6002841061047457610471600183610894565b91505b60008161048381196001610894565b16905081811480156104955750600083115b156104a35750909392505050565b6104ae836001610894565b95945050505050565b600081831080156104cf5783600052826020526104d8565b82600052836020525b5050604060002092915050565b6000808219600101831683145b831561050857600193841c9391909101906104f2565b900392915050565b80516060908190600180821614156105bd576002810460010167ffffffffffffffff8111156105415761054161067c565b60405190808252806020026020018201604052801561056a578160200160208202803683370190505b5091506105968460018303815181106105855761058561087e565b60200260200101516000801b6104b7565b826001845103815181106105ac576105ac61087e565b602002602001018181525050610606565b6002810467ffffffffffffffff8111156105d9576105d961067c565b604051908082528060200260200182016040528015610602578160200160208202803683370190505b5091505b6000805b600183038110156106725761064786828151811061062a5761062a61087e565b60200260200101518783600101815181106101d0576101d061087e565b8483815181106106595761065961087e565b602090810291909101015260019091019060020161060a565b5091949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106a357600080fd5b8135602067ffffffffffffffff808311156106c0576106c061067c565b8260051b604051601f19603f830116810181811084821117156106e5576106e561067c565b60405293845285810183019383810192508785111561070357600080fd5b83870191505b8482101561072257813583529183019190830190610709565b979650505050505050565b60006020828403121561073f57600080fd5b813567ffffffffffffffff81111561075657600080fd5b61076284828501610692565b949350505050565b60008060006060848603121561077f57600080fd5b83359250602084013567ffffffffffffffff81111561079d57600080fd5b6107a986828701610692565b925050604084013590509250925092565b600080604083850312156107cd57600080fd5b823567ffffffffffffffff8111156107e457600080fd5b6107f085828601610692565b95602094909401359450505050565b6020808252825182820181905260009190848201906040850190845b818110156108375783518352928401929184019160010161081b565b50909695505050505050565b60006020828403121561085557600080fd5b5035919050565b6000806040838503121561086f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600082198211156108b557634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220230bb29c177204238f88e5737d656062f8db4a5ddf3fb37dda54566e477f105164736f6c634300080b0033",
    "sourceMap": "242:576:32:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80632e08d6021461006757806358161a421461008d578063b8616195146100b0578063cf06c7b7146100d0578063dd1d2599146100e3578063e27d5153146100f6575b600080fd5b61007a61007536600461072d565b610109565b6040519081526020015b60405180910390f35b6100a061009b36600461076a565b6101a9565b6040519015158152602001610084565b6100c36100be3660046107ba565b6101f3565b60405161008491906107ff565b61007a6100de366004610843565b61037a565b61007a6100f136600461085c565b6104b7565b61007a610104366004610843565b6104e5565b6000600182511161016d5760405162461bcd60e51b815260206004820152602360248201527f776f6e27742067656e657261746520726f6f7420666f722073696e676c65206c60448201526232b0b360e91b60648201526084015b60405180910390fd5b6001825111156101875761018082610510565b915061016d565b8160008151811061019a5761019a61087e565b60200260200101519050919050565b81516000908290825b818110156101e7576101dd838783815181106101d0576101d061087e565b60200260200101516104b7565b92506001016101b2565b50509093149392505050565b606060018351116102525760405162461bcd60e51b8152602060048201526024808201527f776f6e27742067656e65726174652070726f6f6620666f722073696e676c65206044820152633632b0b360e11b6064820152608401610164565b600061025e845161037a565b67ffffffffffffffff8111156102765761027661067c565b60405190808252806020026020018201604052801561029f578160200160208202803683370190505b50905060005b6001855111156103725783600116600114156102fb578460018503815181106102d0576102d061087e565b60200260200101518282815181106102ea576102ea61087e565b602002602001018181525050610359565b845184600101141561031d576000801b8282815181106102ea576102ea61087e565b8484600101815181106103325761033261087e565b602002602001015182828151811061034c5761034c61087e565b6020026020010181815250505b60010160028404935061036b85610510565b94506102a5565b509392505050565b60006001821161038c57506000919050565b600082600160801b81106103ad57608093841c936103aa9083610894565b91505b6801000000000000000084106103d057604093841c936103cd9083610894565b91505b64010000000084106103ef57602093841c936103ec9083610894565b91505b62010000841061040c57601093841c936104099083610894565b91505b610100841061042857600893841c936104259083610894565b91505b6010841061044357600493841c936104409083610894565b91505b6004841061045e57600293841c9361045b9083610894565b91505b6002841061047457610471600183610894565b91505b60008161048381196001610894565b16905081811480156104955750600083115b156104a35750909392505050565b6104ae836001610894565b95945050505050565b600081831080156104cf5783600052826020526104d8565b82600052836020525b5050604060002092915050565b6000808219600101831683145b831561050857600193841c9391909101906104f2565b900392915050565b80516060908190600180821614156105bd576002810460010167ffffffffffffffff8111156105415761054161067c565b60405190808252806020026020018201604052801561056a578160200160208202803683370190505b5091506105968460018303815181106105855761058561087e565b60200260200101516000801b6104b7565b826001845103815181106105ac576105ac61087e565b602002602001018181525050610606565b6002810467ffffffffffffffff8111156105d9576105d961067c565b604051908082528060200260200182016040528015610602578160200160208202803683370190505b5091505b6000805b600183038110156106725761064786828151811061062a5761062a61087e565b60200260200101518783600101815181106101d0576101d061087e565b8483815181106106595761065961087e565b602090810291909101015260019091019060020161060a565b5091949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126106a357600080fd5b8135602067ffffffffffffffff808311156106c0576106c061067c565b8260051b604051601f19603f830116810181811084821117156106e5576106e561067c565b60405293845285810183019383810192508785111561070357600080fd5b83870191505b8482101561072257813583529183019190830190610709565b979650505050505050565b60006020828403121561073f57600080fd5b813567ffffffffffffffff81111561075657600080fd5b61076284828501610692565b949350505050565b60008060006060848603121561077f57600080fd5b83359250602084013567ffffffffffffffff81111561079d57600080fd5b6107a986828701610692565b925050604084013590509250925092565b600080604083850312156107cd57600080fd5b823567ffffffffffffffff8111156107e457600080fd5b6107f085828601610692565b95602094909401359450505050565b6020808252825182820181905260009190848201906040850190845b818110156108375783518352928401929184019160010161081b565b50909695505050505050565b60006020828403121561085557600080fd5b5035919050565b6000806040838503121561086f57600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600082198211156108b557634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220230bb29c177204238f88e5737d656062f8db4a5ddf3fb37dda54566e477f105164736f6c634300080b0033",
    "sourceMap": "242:576:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;987:253:33;;;;;;:::i;:::-;;:::i;:::-;;;1552:25:73;;;1540:2;1525:18;987:253:33;;;;;;;;452:451;;;;;;:::i;:::-;;:::i;:::-;;;2242:14:73;;2235:22;2217:41;;2205:2;2190:18;452:451:33;2077:187:73;1246:1168:33;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;5179:952::-;;;;;;:::i;:::-;;:::i;407:409:32:-;;;;;;:::i;:::-;;:::i;3606:1421:33:-;;;;;;:::i;:::-;;:::i;987:253::-;1048:7;1089:1;1075:4;:11;:15;1067:63;;;;-1:-1:-1;;;1067:63:33;;4149:2:73;1067:63:33;;;4131:21:73;4188:2;4168:18;;;4161:30;4227:34;4207:18;;;4200:62;-1:-1:-1;;;4278:18:73;;;4271:33;4321:19;;1067:63:33;;;;;;;;;1160:1;1146:4;:11;:15;1140:70;;;1184:15;1194:4;1184:9;:15::i;:::-;1177:22;;1140:70;;;1226:4;1231:1;1226:7;;;;;;;;:::i;:::-;;;;;;;1219:14;;987:253;;;:::o;452:451::-;690:12;;556:4;;651:12;;556:4;736:115;756:6;752:1;:10;736:115;;;800:36;814:11;827:5;833:1;827:8;;;;;;;;:::i;:::-;;;;;;;800:13;:36::i;:::-;786:50;-1:-1:-1;764:3:33;;736:115;;;-1:-1:-1;;877:19:33;;;;452:451;-1:-1:-1;;;452:451:33:o;1246:1168::-;1322:16;1372:1;1358:4;:11;:15;1350:64;;;;-1:-1:-1;;;1350:64:33;;4685:2:73;1350:64:33;;;4667:21:73;4724:2;4704:18;;;4697:30;4763:34;4743:18;;;4736:62;-1:-1:-1;;;4814:18:73;;;4807:34;4858:19;;1350:64:33;4483:400:73;1350:64:33;1501:23;1541:29;1558:4;:11;1541:16;:29::i;:::-;1527:44;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1527:44:33;;1501:70;;1581:11;1910:475;1930:1;1916:4;:11;:15;1910:475;;;1978:4;1985:3;1978:10;1992:1;1978:15;1975:300;;;2031:4;2043:1;2036:4;:8;2031:14;;;;;;;;:::i;:::-;;;;;;;2017:6;2024:3;2017:11;;;;;;;;:::i;:::-;;;;;;:28;;;;;1975:300;;;2103:4;:11;2091:4;2098:1;2091:8;:23;2087:188;;;2160:1;2152:10;;2138:6;2145:3;2138:11;;;;;;;;:::i;2087:188::-;2242:4;2247;2254:1;2247:8;2242:14;;;;;;;;:::i;:::-;;;;;;;2228:6;2235:3;2228:11;;;;;;;;:::i;:::-;;;;;;:28;;;;;2087:188;2292:5;;2323:1;2315:9;;;;2359:15;2369:4;2359:9;:15::i;:::-;2352:22;;1910:475;;;-1:-1:-1;2401:6:33;1246:1168;-1:-1:-1;;;1246:1168:33:o;5179:952::-;5237:7;5264:1;5259;:6;5255:45;;-1:-1:-1;5288:1:33;;5179:952;-1:-1:-1;5179:952:33:o;5255:45::-;5309:11;5347:1;-1:-1:-1;;;5362:11:33;;5358:75;;5395:3;5389:9;;;;5412:10;;;;:::i;:::-;;;5358:75;5451:5;5446:1;:10;5442:72;;5478:2;5472:8;;;;5494:9;;;;:::i;:::-;;;5442:72;5532:5;5527:1;:10;5523:72;;5559:2;5553:8;;;;5575:9;;;;:::i;:::-;;;5523:72;5613:5;5608:1;:10;5604:72;;5640:2;5634:8;;;;5656:9;;;;:::i;:::-;;;5604:72;5694:4;5689:1;:9;5685:69;;5720:1;5714:7;;;;5735:8;;;;:::i;:::-;;;5685:69;5772:4;5767:1;:9;5763:69;;5798:1;5792:7;;;;5813:8;;;;:::i;:::-;;;5763:69;5850:4;5845:1;:9;5841:69;;5876:1;5870:7;;;;5891:8;;;;:::i;:::-;;;5841:69;5928:4;5923:1;:9;5919:48;;5948:8;5955:1;5948:8;;:::i;:::-;;;5919:48;5977:11;6003:2;5992:7;:3;;5998:1;5992:7;:::i;:::-;5991:14;5977:28;;6027:2;6020:3;:9;6019:24;;;;;6041:1;6035:3;:7;6019:24;6015:110;;;-1:-1:-1;6066:3:33;;5179:952;-1:-1:-1;;;5179:952:33:o;6015:110::-;6107:7;:3;6113:1;6107:7;:::i;:::-;6100:14;5179:952;-1:-1:-1;;;;;5179:952:33:o;407:409:32:-;489:13;542:15;;;569:89;;;;707:4;702:3;695:17;741:5;735:4;728:19;535:225;;569:89;605:5;600:3;593:18;640:4;634;627:18;535:225;-1:-1:-1;;796:4:32;791:3;781:20;;407:409;-1:-1:-1;;407:409:32:o;3606:1421:33:-;3656:7;;4677:6;;4685:1;4673:14;4669:22;;4666:29;;4873:78;4880:5;;4873:78;;4911:1;4905:7;;;;4930:6;;;;;4873:78;;;4964:12;;;3606:1421;-1:-1:-1;;3606:1421:33:o;2493:990::-;2895:11;;2557:16;;;;2933:3;2924:12;;;:17;2920:251;;;2992:1;2983:6;:10;2996:1;2983:14;2969:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2969:29:33;;2960:38;;3044:43;3058:4;3072:1;3063:6;:10;3058:16;;;;;;;;:::i;:::-;;;;;;;3084:1;3076:10;;3044:13;:43::i;:::-;3016:6;3039:1;3023:6;:13;:17;3016:25;;;;;;;;:::i;:::-;;;;;;:71;;;;;2920:251;;;3158:1;3149:6;:10;3135:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3135:25:33;;3126:34;;2920:251;3273:11;3307:9;3302:142;3333:1;3326:6;:8;3322:1;:12;3302:142;;;3373:33;3387:4;3392:1;3387:7;;;;;;;;:::i;:::-;;;;;;;3396:4;3401:1;3403;3401:3;3396:9;;;;;;;;:::i;3373:33::-;3359:6;3366:3;3359:11;;;;;;;;:::i;:::-;;;;;;;;;;:47;3424:5;;;;;3339:1;3336:4;3302:142;;;-1:-1:-1;3470:6:33;;2493:990;-1:-1:-1;;;;2493:990:33:o;14:127:73:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:902;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;307:6;294:20;333:4;356:18;393:2;389;386:10;383:36;;;399:18;;:::i;:::-;445:2;442:1;438:10;477:2;471:9;540:2;536:7;531:2;527;523:11;519:25;511:6;507:38;595:6;583:10;580:22;575:2;563:10;560:18;557:46;554:72;;;606:18;;:::i;:::-;642:2;635:22;692:18;;;768:15;;;764:24;;;726:15;;;;-1:-1:-1;800:15:73;;;797:35;;;828:1;825;818:12;797:35;864:2;856:6;852:15;841:26;;876:142;892:6;887:3;884:15;876:142;;;958:17;;946:30;;996:12;;;;909;;;;876:142;;;1036:6;146:902;-1:-1:-1;;;;;;;146:902:73:o;1053:348::-;1137:6;1190:2;1178:9;1169:7;1165:23;1161:32;1158:52;;;1206:1;1203;1196:12;1158:52;1246:9;1233:23;1279:18;1271:6;1268:30;1265:50;;;1311:1;1308;1301:12;1265:50;1334:61;1387:7;1378:6;1367:9;1363:22;1334:61;:::i;:::-;1324:71;1053:348;-1:-1:-1;;;;1053:348:73:o;1588:484::-;1690:6;1698;1706;1759:2;1747:9;1738:7;1734:23;1730:32;1727:52;;;1775:1;1772;1765:12;1727:52;1811:9;1798:23;1788:33;;1872:2;1861:9;1857:18;1844:32;1899:18;1891:6;1888:30;1885:50;;;1931:1;1928;1921:12;1885:50;1954:61;2007:7;1998:6;1987:9;1983:22;1954:61;:::i;:::-;1944:71;;;2062:2;2051:9;2047:18;2034:32;2024:42;;1588:484;;;;;:::o;2269:416::-;2362:6;2370;2423:2;2411:9;2402:7;2398:23;2394:32;2391:52;;;2439:1;2436;2429:12;2391:52;2479:9;2466:23;2512:18;2504:6;2501:30;2498:50;;;2544:1;2541;2534:12;2498:50;2567:61;2620:7;2611:6;2600:9;2596:22;2567:61;:::i;:::-;2557:71;2675:2;2660:18;;;;2647:32;;-1:-1:-1;;;;2269:416:73:o;2690:632::-;2861:2;2913:21;;;2983:13;;2886:18;;;3005:22;;;2832:4;;2861:2;3084:15;;;;3058:2;3043:18;;;2832:4;3127:169;3141:6;3138:1;3135:13;3127:169;;;3202:13;;3190:26;;3271:15;;;;3236:12;;;;3163:1;3156:9;3127:169;;;-1:-1:-1;3313:3:73;;2690:632;-1:-1:-1;;;;;;2690:632:73:o;3327:180::-;3386:6;3439:2;3427:9;3418:7;3414:23;3410:32;3407:52;;;3455:1;3452;3445:12;3407:52;-1:-1:-1;3478:23:73;;3327:180;-1:-1:-1;3327:180:73:o;3694:248::-;3762:6;3770;3823:2;3811:9;3802:7;3798:23;3794:32;3791:52;;;3839:1;3836;3829:12;3791:52;-1:-1:-1;;3862:23:73;;;3932:2;3917:18;;;3904:32;;-1:-1:-1;3694:248:73:o;4351:127::-;4412:10;4407:3;4403:20;4400:1;4393:31;4443:4;4440:1;4433:15;4467:4;4464:1;4457:15;5020:225;5060:3;5091:1;5087:6;5084:1;5081:13;5078:136;;;5136:10;5131:3;5127:20;5124:1;5117:31;5171:4;5168:1;5161:15;5199:4;5196:1;5189:15;5078:136;-1:-1:-1;5230:9:73;;5020:225::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getProof(bytes32[],uint256)": "b8616195",
    "getRoot(bytes32[])": "2e08d602",
    "hashLeafPairs(bytes32,bytes32)": "dd1d2599",
    "log2ceil(uint256)": "e27d5153",
    "log2ceilBitMagic(uint256)": "cf06c7b7",
    "verifyProof(bytes32,bytes32[],bytes32)": "58161a42"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"node\",\"type\":\"uint256\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"hashLeafPairs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2ceil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"log2ceilBitMagic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"valueToProve\",\"type\":\"bytes32\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dmfxyz\",\"details\":\"Note Generic Merkle Tree\",\"kind\":\"dev\",\"methods\":{\"log2ceil(uint256)\":{\"details\":\"Note that x is assumed > 0\"},\"log2ceilBitMagic(uint256)\":{\"details\":\"Note that x assumed > 1\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hashLeafPairs(bytes32,bytes32)\":{\"notice\":\"ascending sort and concat prior to hashing\"},\"log2ceilBitMagic(uint256)\":{\"notice\":\"Original bitmagic adapted from https://github.com/paulrberg/prb-math/blob/main/contracts/PRBMath.sol\"}},\"notice\":\"Nascent, simple, kinda efficient (and improving!) Merkle proof generator and verifier\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"installed_contracts/murky/src/Merkle.sol\":\"Merkle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=installed_contracts/forge-std/lib/ds-test/src/\",\":forge-std/=installed_contracts/forge-std/src/\",\":murky/=installed_contracts/murky/src/\",\":openzeppelin-contracts/=installed_contracts/murky/lib/openzeppelin-contracts/\"]},\"sources\":{\"installed_contracts/murky/src/Merkle.sol\":{\"keccak256\":\"0x70e50a6d61ea806b5ba0c8ff76fadfa3e90e6dfecb6900b1c0492eac0309660f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b6cc1b02a6d11e029fe24d5d638ad891a3a2552aaef9d3a0918274b1496fcd74\",\"dweb:/ipfs/QmWsU7yXsyKATkfYb8g1jbPTbgGsCg9rk7bJ3ypCYxQixB\"]},\"installed_contracts/murky/src/common/MurkyBase.sol\":{\"keccak256\":\"0x5287741b2b215c9a11cc8482b419abde0625dfc3949d539c72ee498108842894\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://259e803b0811e404bba09237bce4ef42f2ff27dacaca770d1eb7c1afddbf762b\",\"dweb:/ipfs/QmWfbsHa1siBxDEqFmbnzUuZqyitFZHmDXo2vc4cVn4uJe\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.11+commit.d7f03943"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "data",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256",
              "name": "node",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getProof",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "data",
              "type": "bytes32[]"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "getRoot",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "left",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "right",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "hashLeafPairs",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "log2ceil",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "log2ceilBitMagic",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "proof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32",
              "name": "valueToProve",
              "type": "bytes32"
            }
          ],
          "stateMutability": "pure",
          "type": "function",
          "name": "verifyProof",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "log2ceil(uint256)": {
            "details": "Note that x is assumed > 0"
          },
          "log2ceilBitMagic(uint256)": {
            "details": "Note that x assumed > 1"
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "hashLeafPairs(bytes32,bytes32)": {
            "notice": "ascending sort and concat prior to hashing"
          },
          "log2ceilBitMagic(uint256)": {
            "notice": "Original bitmagic adapted from https://github.com/paulrberg/prb-math/blob/main/contracts/PRBMath.sol"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@openzeppelin/=node_modules/@openzeppelin/",
        ":@uniswap/=node_modules/@uniswap/",
        ":ds-test/=installed_contracts/forge-std/lib/ds-test/src/",
        ":forge-std/=installed_contracts/forge-std/src/",
        ":murky/=installed_contracts/murky/src/",
        ":openzeppelin-contracts/=installed_contracts/murky/lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "installed_contracts/murky/src/Merkle.sol": "Merkle"
      },
      "libraries": {}
    },
    "sources": {
      "installed_contracts/murky/src/Merkle.sol": {
        "keccak256": "0x70e50a6d61ea806b5ba0c8ff76fadfa3e90e6dfecb6900b1c0492eac0309660f",
        "urls": [
          "bzz-raw://b6cc1b02a6d11e029fe24d5d638ad891a3a2552aaef9d3a0918274b1496fcd74",
          "dweb:/ipfs/QmWsU7yXsyKATkfYb8g1jbPTbgGsCg9rk7bJ3ypCYxQixB"
        ],
        "license": "MIT"
      },
      "installed_contracts/murky/src/common/MurkyBase.sol": {
        "keccak256": "0x5287741b2b215c9a11cc8482b419abde0625dfc3949d539c72ee498108842894",
        "urls": [
          "bzz-raw://259e803b0811e404bba09237bce4ef42f2ff27dacaca770d1eb7c1afddbf762b",
          "dweb:/ipfs/QmWfbsHa1siBxDEqFmbnzUuZqyitFZHmDXo2vc4cVn4uJe"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "installed_contracts/murky/src/Merkle.sol",
    "id": 37069,
    "exportedSymbols": {
      "Merkle": [
        37068
      ],
      "MurkyBase": [
        37585
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:786:32",
    "nodes": [
      {
        "id": 37050,
        "nodeType": "PragmaDirective",
        "src": "32:23:32",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ]
      },
      {
        "id": 37051,
        "nodeType": "ImportDirective",
        "src": "57:32:32",
        "nodes": [],
        "absolutePath": "installed_contracts/murky/src/common/MurkyBase.sol",
        "file": "./common/MurkyBase.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 37069,
        "sourceUnit": 37586,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 37068,
        "nodeType": "ContractDefinition",
        "src": "242:576:32",
        "nodes": [
          {
            "id": 37067,
            "nodeType": "FunctionDefinition",
            "src": "407:409:32",
            "nodes": [],
            "body": {
              "id": 37066,
              "nodeType": "Block",
              "src": "504:312:32",
              "nodes": [],
              "statements": [
                {
                  "AST": {
                    "nodeType": "YulBlock",
                    "src": "522:288:32",
                    "statements": [
                      {
                        "cases": [
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "576:82:32",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "600:3:32",
                                        "type": "",
                                        "value": "0x0"
                                      },
                                      {
                                        "name": "right",
                                        "nodeType": "YulIdentifier",
                                        "src": "605:5:32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "593:6:32"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "593:18:32"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "593:18:32"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "634:4:32",
                                        "type": "",
                                        "value": "0x20"
                                      },
                                      {
                                        "name": "left",
                                        "nodeType": "YulIdentifier",
                                        "src": "640:4:32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "627:6:32"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "627:18:32"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "627:18:32"
                                }
                              ]
                            },
                            "nodeType": "YulCase",
                            "src": "569:89:32",
                            "value": {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "574:1:32",
                              "type": "",
                              "value": "0"
                            }
                          },
                          {
                            "body": {
                              "nodeType": "YulBlock",
                              "src": "678:82:32",
                              "statements": [
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "702:3:32",
                                        "type": "",
                                        "value": "0x0"
                                      },
                                      {
                                        "name": "left",
                                        "nodeType": "YulIdentifier",
                                        "src": "707:4:32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "695:6:32"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "695:17:32"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "695:17:32"
                                },
                                {
                                  "expression": {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "735:4:32",
                                        "type": "",
                                        "value": "0x20"
                                      },
                                      {
                                        "name": "right",
                                        "nodeType": "YulIdentifier",
                                        "src": "741:5:32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mstore",
                                      "nodeType": "YulIdentifier",
                                      "src": "728:6:32"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "728:19:32"
                                  },
                                  "nodeType": "YulExpressionStatement",
                                  "src": "728:19:32"
                                }
                              ]
                            },
                            "nodeType": "YulCase",
                            "src": "670:90:32",
                            "value": "default"
                          }
                        ],
                        "expression": {
                          "arguments": [
                            {
                              "name": "left",
                              "nodeType": "YulIdentifier",
                              "src": "545:4:32"
                            },
                            {
                              "name": "right",
                              "nodeType": "YulIdentifier",
                              "src": "551:5:32"
                            }
                          ],
                          "functionName": {
                            "name": "lt",
                            "nodeType": "YulIdentifier",
                            "src": "542:2:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "542:15:32"
                        },
                        "nodeType": "YulSwitch",
                        "src": "535:225:32"
                      },
                      {
                        "nodeType": "YulAssignment",
                        "src": "772:29:32",
                        "value": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "791:3:32",
                              "type": "",
                              "value": "0x0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "796:4:32",
                              "type": "",
                              "value": "0x40"
                            }
                          ],
                          "functionName": {
                            "name": "keccak256",
                            "nodeType": "YulIdentifier",
                            "src": "781:9:32"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "781:20:32"
                        },
                        "variableNames": [
                          {
                            "name": "_hash",
                            "nodeType": "YulIdentifier",
                            "src": "772:5:32"
                          }
                        ]
                      }
                    ]
                  },
                  "evmVersion": "london",
                  "externalReferences": [
                    {
                      "declaration": 37063,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "772:5:32",
                      "valueSize": 1
                    },
                    {
                      "declaration": 37057,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "545:4:32",
                      "valueSize": 1
                    },
                    {
                      "declaration": 37057,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "640:4:32",
                      "valueSize": 1
                    },
                    {
                      "declaration": 37057,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "707:4:32",
                      "valueSize": 1
                    },
                    {
                      "declaration": 37059,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "551:5:32",
                      "valueSize": 1
                    },
                    {
                      "declaration": 37059,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "605:5:32",
                      "valueSize": 1
                    },
                    {
                      "declaration": 37059,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "741:5:32",
                      "valueSize": 1
                    }
                  ],
                  "id": 37065,
                  "nodeType": "InlineAssembly",
                  "src": "513:297:32"
                }
              ]
            },
            "baseFunctions": [
              37083
            ],
            "documentation": {
              "id": 37055,
              "nodeType": "StructuredDocumentation",
              "src": "356:46:32",
              "text": "ascending sort and concat prior to hashing"
            },
            "functionSelector": "dd1d2599",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "hashLeafPairs",
            "nameLocation": "416:13:32",
            "overrides": {
              "id": 37061,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "471:8:32"
            },
            "parameters": {
              "id": 37060,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37057,
                  "mutability": "mutable",
                  "name": "left",
                  "nameLocation": "438:4:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 37067,
                  "src": "430:12:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 37056,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "430:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 37059,
                  "mutability": "mutable",
                  "name": "right",
                  "nameLocation": "452:5:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 37067,
                  "src": "444:13:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 37058,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "444:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "429:29:32"
            },
            "returnParameters": {
              "id": 37064,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 37063,
                  "mutability": "mutable",
                  "name": "_hash",
                  "nameLocation": "497:5:32",
                  "nodeType": "VariableDeclaration",
                  "scope": 37067,
                  "src": "489:13:32",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 37062,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "489:7:32",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "488:15:32"
            },
            "scope": 37068,
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 37053,
              "name": "MurkyBase",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 37585,
              "src": "261:9:32"
            },
            "id": 37054,
            "nodeType": "InheritanceSpecifier",
            "src": "261:9:32"
          }
        ],
        "canonicalName": "Merkle",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 37052,
          "nodeType": "StructuredDocumentation",
          "src": "91:151:32",
          "text": "@notice Nascent, simple, kinda efficient (and improving!) Merkle proof generator and verifier\n @author dmfxyz\n @dev Note Generic Merkle Tree"
        },
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          37068,
          37585
        ],
        "name": "Merkle",
        "nameLocation": "251:6:32",
        "scope": 37069,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 32
}