{"abi":[],"bytecode":{"object":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ca49ef98ce3d71e01e480c60ddcb106c3e74935b598af9d06700a61f64ade4364736f6c634300081a0033","sourceMap":"12259:3937:121:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;12259:3937:121;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200ca49ef98ce3d71e01e480c60ddcb106c3e74935b598af9d06700a61f64ade4364736f6c634300081a0033","sourceMap":"12259:3937:121:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing upgradeable contracts from Forge tests, without validations. Can be used with `forge coverage`. Requires implementation contracts to be instantiated first. Does not require `--ffi` and does not require a clean compilation before each run. Not supported for OpenZeppelin Defender deployments. WARNING: Not recommended for use in Forge scripts. `UnsafeUpgrades` does not validate whether your contracts are upgrade safe or whether new implementations are compatible with previous ones. Use `Upgrades` if you want validations to be run. NOTE: Only for upgrading existing deployments using OpenZeppelin Contracts v4. For new deployments, use OpenZeppelin Contracts v5 and Upgrades.sol.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-foundry-upgrades/src/LegacyUpgrades.sol\":\"UnsafeUpgrades\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@uniswap/v3-core/=lib/uniswap-v3-core/\",\":@uniswap/v3-periphery/=lib/uniswap-v3-periphery/\",\":account-abstraction-v7/=lib/account-abstraction-v7/contracts/\",\":account-abstraction/=lib/account-abstraction/contracts/\",\":ds-test/=lib/openzeppelin-contracts-5/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-5/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/\",\":openzeppelin-contracts-5/=lib/openzeppelin-contracts-5/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":uniswap-v3-core/=lib/uniswap-v3-core/\",\":uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/\"]},\"sources\":{\"lib/forge-std/src/Vm.sol\":{\"keccak256\":\"0xfd9e719ff0673fdd8ff83bbe72ee8cae0273d61937d27fde5d9159d9849233f4\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://b14aaef0d76f2e5257e4e3ab33895d5260d4c7707ff4d37fea1f31d25c8684a8\",\"dweb:/ipfs/QmRd6BMh4FNDPW8Niy4TU2XrtKqAc6GRTfw8xjSwpQ42Gy\"]},\"lib/forge-std/src/console.sol\":{\"keccak256\":\"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194\",\"dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol\":{\"keccak256\":\"0x42cad11a7033f2fe05dd68611d2304407a620ac985b91edf29d5868cfe196223\",\"urls\":[\"bzz-raw://3cbc2333234e1f00eab5e57c4bcaf5115661e5e066a17c70af587a0a96f24669\",\"dweb:/ipfs/QmPHvStqcvZL46LW5N2ExTwAaqNhRCcmAX66aR6oE1WDar\"]},\"lib/openzeppelin-foundry-upgrades/src/Defender.sol\":{\"keccak256\":\"0x2114e4d70d53b36e8cec54ba11ff78d9f38a466ec3504c76c7f26101a7cff37f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://58f4d9bc58646e7631b263cdb8ef260e6818e9f716036d81d1c18218c9557a23\",\"dweb:/ipfs/QmS18L4R4gPtay9eQBcR28DnwmBkGSWsiCFwm2tXc3BkHL\"]},\"lib/openzeppelin-foundry-upgrades/src/LegacyUpgrades.sol\":{\"keccak256\":\"0x8436719f73c76efadaa16cd719d088f698ea3591595dfdf2c15fd66f3e203197\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ac8d0e55defe124adcc3845348602d6528b00b7dc5f7abf9e1b245d0cea9b55e\",\"dweb:/ipfs/QmaPBoG89Bd2btJZW5kjXx7zXo6KhAdeTuMq5xo431M8xq\"]},\"lib/openzeppelin-foundry-upgrades/src/Options.sol\":{\"keccak256\":\"0xa5414683d6b219b28e75ecaab3d00a305dfaf4d970389a88992275c8072ce8ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1dbfd566ba318f2b740159c28e4511c84c9d76fcc293ae17c9b1a87b3ea16c9\",\"dweb:/ipfs/QmcyxPoeBdzA9iHEgd76xKhaQ8HKfpV4owdSv6127MmveT\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol\":{\"keccak256\":\"0x37073df20d2b5fbb0a873e6b2dd76c23e23455d1c2d2ba57d2f0998201a4251d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79d507647ea48d93371341684cf4199d55ed799db9d3489bc016f53990d2ff7c\",\"dweb:/ipfs/QmQWgXiYcPcwNcrkTHb72WtHd4xPcXfRUMfBrhkDHgr2ut\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol\":{\"keccak256\":\"0x868ffdaf5d185fee103fc4581385392b47c209a5cfd2aec01f0307dbc0101d73\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76e51bf69a4d0b5d1d9cfa7efa442bdcf9d713966563432ef8fdd00ec959a25e\",\"dweb:/ipfs/QmTHkdvMnqmEvus7zbmHhPkWk3fM9SW2Jq8gnyBLwVJtxG\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol\":{\"keccak256\":\"0x4de002af810f6a5fe26a6381e0ead3331735bd0059434a22df75e17c177b5f87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://af32ff07f606e530a53030db141a75af144cfe065a6543939d412018c6159540\",\"dweb:/ipfs/QmbfTB92Zd8VQHW61g9dx1CvGgSL5SCoZDLrvJfnR7Ctio\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol\":{\"keccak256\":\"0xf1a1441c18a296853509e9b1d18be794ed3de836caea49d6948b5e9ac566e8c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f3463514235bd875ecacf45f95cac64aa650dd38d05c15fe1f4203b6b5733bd\",\"dweb:/ipfs/Qmcbhmw9NPkG8MqiVsQ4qUupeQFCRgyBDKuoUwohwa8EP3\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IProxyAdmin.sol\":{\"keccak256\":\"0xf5e514595089f8959da130507086e7388602a71ce60575d141e7d892dfbddbfc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b41366e2823ccc8cb42304496d761b3df80946d17384634a61afd7139495c91\",\"dweb:/ipfs/QmZE2nRMxax1NPj63ifemKdScGJzKNWi7BCGudjFLsUz1y\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableBeacon.sol\":{\"keccak256\":\"0xa8d7bffdd26eb763e459650c83f247b54af79800c2df52ad05878f238fc1c2f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed47f1e53e5eb7d48fed60a414755641fca8fa0e713fd503b2597227da78a2f\",\"dweb:/ipfs/QmQr8A5wddHdhQNauFShXxRkPcuVVpVsYpq846WhmFC8Tv\"]},\"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableProxy.sol\":{\"keccak256\":\"0x781b564b90bba0c0e8e12fb66b1c910f42d369db469f2e88592b4cff29de99a5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://45fcab02a43fde934445b88e905aba3f58a70b75dd6ee6eb86a3d593424aeb03\",\"dweb:/ipfs/QmXmhAgrctaYUDLoTRgUjwD4deoXu1E2QT1kftVGcVa56j\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@uniswap/v3-core/=lib/uniswap-v3-core/","@uniswap/v3-periphery/=lib/uniswap-v3-periphery/","account-abstraction-v7/=lib/account-abstraction-v7/contracts/","account-abstraction/=lib/account-abstraction/contracts/","ds-test/=lib/openzeppelin-contracts-5/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-5/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","murky/=lib/murky/","openzeppelin-contracts-5/=lib/openzeppelin-contracts-5/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","uniswap-v3-core/=lib/uniswap-v3-core/","uniswap-v3-periphery/=lib/uniswap-v3-periphery/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-foundry-upgrades/src/LegacyUpgrades.sol":"UnsafeUpgrades"},"evmVersion":"paris","libraries":{}},"sources":{"lib/forge-std/src/Vm.sol":{"keccak256":"0xfd9e719ff0673fdd8ff83bbe72ee8cae0273d61937d27fde5d9159d9849233f4","urls":["bzz-raw://b14aaef0d76f2e5257e4e3ab33895d5260d4c7707ff4d37fea1f31d25c8684a8","dweb:/ipfs/QmRd6BMh4FNDPW8Niy4TU2XrtKqAc6GRTfw8xjSwpQ42Gy"],"license":"MIT OR Apache-2.0"},"lib/forge-std/src/console.sol":{"keccak256":"0xf61cb43a94d8318049d0a7f567af8c0aa952b5762a43851b130b90b3fcde0c6a","urls":["bzz-raw://53a52c6c3aeb22f7a18f53fca16af590308a8e3e5507e74df9b8e2561c932194","dweb:/ipfs/QmaaXuY8mC66YoE2xyZdWuLHXqAxLjbnNxiofx8BTP1MRn"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0","urls":["bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f","dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3","urls":["bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c","dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc","urls":["bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7","dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/src/strings.sol":{"keccak256":"0x42cad11a7033f2fe05dd68611d2304407a620ac985b91edf29d5868cfe196223","urls":["bzz-raw://3cbc2333234e1f00eab5e57c4bcaf5115661e5e066a17c70af587a0a96f24669","dweb:/ipfs/QmPHvStqcvZL46LW5N2ExTwAaqNhRCcmAX66aR6oE1WDar"],"license":null},"lib/openzeppelin-foundry-upgrades/src/Defender.sol":{"keccak256":"0x2114e4d70d53b36e8cec54ba11ff78d9f38a466ec3504c76c7f26101a7cff37f","urls":["bzz-raw://58f4d9bc58646e7631b263cdb8ef260e6818e9f716036d81d1c18218c9557a23","dweb:/ipfs/QmS18L4R4gPtay9eQBcR28DnwmBkGSWsiCFwm2tXc3BkHL"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/LegacyUpgrades.sol":{"keccak256":"0x8436719f73c76efadaa16cd719d088f698ea3591595dfdf2c15fd66f3e203197","urls":["bzz-raw://ac8d0e55defe124adcc3845348602d6528b00b7dc5f7abf9e1b245d0cea9b55e","dweb:/ipfs/QmaPBoG89Bd2btJZW5kjXx7zXo6KhAdeTuMq5xo431M8xq"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/Options.sol":{"keccak256":"0xa5414683d6b219b28e75ecaab3d00a305dfaf4d970389a88992275c8072ce8ac","urls":["bzz-raw://b1dbfd566ba318f2b740159c28e4511c84c9d76fcc293ae17c9b1a87b3ea16c9","dweb:/ipfs/QmcyxPoeBdzA9iHEgd76xKhaQ8HKfpV4owdSv6127MmveT"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol":{"keccak256":"0x37073df20d2b5fbb0a873e6b2dd76c23e23455d1c2d2ba57d2f0998201a4251d","urls":["bzz-raw://79d507647ea48d93371341684cf4199d55ed799db9d3489bc016f53990d2ff7c","dweb:/ipfs/QmQWgXiYcPcwNcrkTHb72WtHd4xPcXfRUMfBrhkDHgr2ut"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/internal/DefenderDeploy.sol":{"keccak256":"0x868ffdaf5d185fee103fc4581385392b47c209a5cfd2aec01f0307dbc0101d73","urls":["bzz-raw://76e51bf69a4d0b5d1d9cfa7efa442bdcf9d713966563432ef8fdd00ec959a25e","dweb:/ipfs/QmTHkdvMnqmEvus7zbmHhPkWk3fM9SW2Jq8gnyBLwVJtxG"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/internal/Utils.sol":{"keccak256":"0x4de002af810f6a5fe26a6381e0ead3331735bd0059434a22df75e17c177b5f87","urls":["bzz-raw://af32ff07f606e530a53030db141a75af144cfe065a6543939d412018c6159540","dweb:/ipfs/QmbfTB92Zd8VQHW61g9dx1CvGgSL5SCoZDLrvJfnR7Ctio"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/internal/Versions.sol":{"keccak256":"0xf1a1441c18a296853509e9b1d18be794ed3de836caea49d6948b5e9ac566e8c6","urls":["bzz-raw://6f3463514235bd875ecacf45f95cac64aa650dd38d05c15fe1f4203b6b5733bd","dweb:/ipfs/Qmcbhmw9NPkG8MqiVsQ4qUupeQFCRgyBDKuoUwohwa8EP3"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IProxyAdmin.sol":{"keccak256":"0xf5e514595089f8959da130507086e7388602a71ce60575d141e7d892dfbddbfc","urls":["bzz-raw://9b41366e2823ccc8cb42304496d761b3df80946d17384634a61afd7139495c91","dweb:/ipfs/QmZE2nRMxax1NPj63ifemKdScGJzKNWi7BCGudjFLsUz1y"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableBeacon.sol":{"keccak256":"0xa8d7bffdd26eb763e459650c83f247b54af79800c2df52ad05878f238fc1c2f8","urls":["bzz-raw://8ed47f1e53e5eb7d48fed60a414755641fca8fa0e713fd503b2597227da78a2f","dweb:/ipfs/QmQr8A5wddHdhQNauFShXxRkPcuVVpVsYpq846WhmFC8Tv"],"license":"MIT"},"lib/openzeppelin-foundry-upgrades/src/internal/interfaces/IUpgradeableProxy.sol":{"keccak256":"0x781b564b90bba0c0e8e12fb66b1c910f42d369db469f2e88592b4cff29de99a5","urls":["bzz-raw://45fcab02a43fde934445b88e905aba3f58a70b75dd6ee6eb86a3d593424aeb03","dweb:/ipfs/QmXmhAgrctaYUDLoTRgUjwD4deoXu1E2QT1kftVGcVa56j"],"license":"MIT"}},"version":1},"storageLayout":{"storage":[],"types":{}},"ast":{"absolutePath":"lib/openzeppelin-foundry-upgrades/src/LegacyUpgrades.sol","id":68020,"exportedSymbols":{"Core":[69052],"Options":[68038],"UnsafeUpgrades":[68019],"Upgrades":[67899]},"nodeType":"SourceUnit","src":"32:16165:121","nodes":[{"id":67628,"nodeType":"PragmaDirective","src":"32:23:121","nodes":[],"literals":["solidity","^","0.8",".0"]},{"id":67630,"nodeType":"ImportDirective","src":"57:43:121","nodes":[],"absolutePath":"lib/openzeppelin-foundry-upgrades/src/Options.sol","file":"../src/Options.sol","nameLocation":"-1:-1:-1","scope":68020,"sourceUnit":68068,"symbolAliases":[{"foreign":{"id":67629,"name":"Options","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68038,"src":"65:7:121","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":67632,"nodeType":"ImportDirective","src":"101:46:121","nodes":[],"absolutePath":"lib/openzeppelin-foundry-upgrades/src/internal/Core.sol","file":"../src/internal/Core.sol","nameLocation":"-1:-1:-1","scope":68020,"sourceUnit":69053,"symbolAliases":[{"foreign":{"id":67631,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"109:4:121","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":67899,"nodeType":"ContractDefinition","src":"394:11108:121","nodes":[{"id":67656,"nodeType":"FunctionDefinition","src":"1154:181:121","nodes":[],"body":{"id":67655,"nodeType":"Block","src":"1268:67:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67649,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67636,"src":"1296:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67650,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67638,"src":"1303:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67651,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67640,"src":"1317:4:121","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":67652,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67643,"src":"1323:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}],"expression":{"id":67646,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"1278:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1283:12:121","memberName":"upgradeProxy","nodeType":"MemberAccess","referencedDeclaration":68117,"src":"1278:17:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_bytes_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$returns$__$","typeString":"function (address,string memory,bytes memory,struct Options memory)"}},"id":67653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1278:50:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67654,"nodeType":"ExpressionStatement","src":"1278:50:121"}]},"documentation":{"id":67634,"nodeType":"StructuredDocumentation","src":"417:732:121","text":" @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n @param proxy Address of the proxy to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n @param opts Common options"},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeProxy","nameLocation":"1163:12:121","parameters":{"id":67644,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67636,"mutability":"mutable","name":"proxy","nameLocation":"1184:5:121","nodeType":"VariableDeclaration","scope":67656,"src":"1176:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67635,"name":"address","nodeType":"ElementaryTypeName","src":"1176:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67638,"mutability":"mutable","name":"contractName","nameLocation":"1205:12:121","nodeType":"VariableDeclaration","scope":67656,"src":"1191:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67637,"name":"string","nodeType":"ElementaryTypeName","src":"1191:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67640,"mutability":"mutable","name":"data","nameLocation":"1232:4:121","nodeType":"VariableDeclaration","scope":67656,"src":"1219:17:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":67639,"name":"bytes","nodeType":"ElementaryTypeName","src":"1219:5:121","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":67643,"mutability":"mutable","name":"opts","nameLocation":"1253:4:121","nodeType":"VariableDeclaration","scope":67656,"src":"1238:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67642,"nodeType":"UserDefinedTypeName","pathNode":{"id":67641,"name":"Options","nameLocations":["1238:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"1238:7:121"},"referencedDeclaration":68038,"src":"1238:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"src":"1175:83:121"},"returnParameters":{"id":67645,"nodeType":"ParameterList","parameters":[],"src":"1268:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67680,"nodeType":"FunctionDefinition","src":"2044:189:121","nodes":[],"body":{"id":67679,"nodeType":"Block","src":"2137:96:121","nodes":[],"statements":[{"assignments":[67668],"declarations":[{"constant":false,"id":67668,"mutability":"mutable","name":"opts","nameLocation":"2162:4:121","nodeType":"VariableDeclaration","scope":67679,"src":"2147:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67667,"nodeType":"UserDefinedTypeName","pathNode":{"id":67666,"name":"Options","nameLocations":["2147:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"2147:7:121"},"referencedDeclaration":68038,"src":"2147:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"id":67669,"nodeType":"VariableDeclarationStatement","src":"2147:19:121"},{"expression":{"arguments":[{"id":67673,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67659,"src":"2194:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67674,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67661,"src":"2201:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67675,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67663,"src":"2215:4:121","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":67676,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67668,"src":"2221:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}],"expression":{"id":67670,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"2176:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2181:12:121","memberName":"upgradeProxy","nodeType":"MemberAccess","referencedDeclaration":68117,"src":"2176:17:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_bytes_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$returns$__$","typeString":"function (address,string memory,bytes memory,struct Options memory)"}},"id":67677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2176:50:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67678,"nodeType":"ExpressionStatement","src":"2176:50:121"}]},"documentation":{"id":67657,"nodeType":"StructuredDocumentation","src":"1341:698:121","text":" @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n @param proxy Address of the proxy to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade"},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeProxy","nameLocation":"2053:12:121","parameters":{"id":67664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67659,"mutability":"mutable","name":"proxy","nameLocation":"2074:5:121","nodeType":"VariableDeclaration","scope":67680,"src":"2066:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67658,"name":"address","nodeType":"ElementaryTypeName","src":"2066:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67661,"mutability":"mutable","name":"contractName","nameLocation":"2095:12:121","nodeType":"VariableDeclaration","scope":67680,"src":"2081:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67660,"name":"string","nodeType":"ElementaryTypeName","src":"2081:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67663,"mutability":"mutable","name":"data","nameLocation":"2122:4:121","nodeType":"VariableDeclaration","scope":67680,"src":"2109:17:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":67662,"name":"bytes","nodeType":"ElementaryTypeName","src":"2109:5:121","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2065:62:121"},"returnParameters":{"id":67665,"nodeType":"ParameterList","parameters":[],"src":"2137:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67706,"nodeType":"FunctionDefinition","src":"3460:257:121","nodes":[],"body":{"id":67705,"nodeType":"Block","src":"3639:78:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67698,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67683,"src":"3667:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67699,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67685,"src":"3674:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67700,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67687,"src":"3688:4:121","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":67701,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67690,"src":"3694:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}},{"id":67702,"name":"tryCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67692,"src":"3700:9:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67695,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"3649:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3654:12:121","memberName":"upgradeProxy","nodeType":"MemberAccess","referencedDeclaration":68143,"src":"3649:17:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_bytes_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,string memory,bytes memory,struct Options memory,address)"}},"id":67703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3649:61:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67704,"nodeType":"ExpressionStatement","src":"3649:61:121"}]},"documentation":{"id":67681,"nodeType":"StructuredDocumentation","src":"2239:1216:121","text":" @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n @param proxy Address of the proxy to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n @param opts Common options\n @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin."},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeProxy","nameLocation":"3469:12:121","parameters":{"id":67693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67683,"mutability":"mutable","name":"proxy","nameLocation":"3499:5:121","nodeType":"VariableDeclaration","scope":67706,"src":"3491:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67682,"name":"address","nodeType":"ElementaryTypeName","src":"3491:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67685,"mutability":"mutable","name":"contractName","nameLocation":"3528:12:121","nodeType":"VariableDeclaration","scope":67706,"src":"3514:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67684,"name":"string","nodeType":"ElementaryTypeName","src":"3514:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67687,"mutability":"mutable","name":"data","nameLocation":"3563:4:121","nodeType":"VariableDeclaration","scope":67706,"src":"3550:17:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":67686,"name":"bytes","nodeType":"ElementaryTypeName","src":"3550:5:121","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":67690,"mutability":"mutable","name":"opts","nameLocation":"3592:4:121","nodeType":"VariableDeclaration","scope":67706,"src":"3577:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67689,"nodeType":"UserDefinedTypeName","pathNode":{"id":67688,"name":"Options","nameLocations":["3577:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"3577:7:121"},"referencedDeclaration":68038,"src":"3577:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"},{"constant":false,"id":67692,"mutability":"mutable","name":"tryCaller","nameLocation":"3614:9:121","nodeType":"VariableDeclaration","scope":67706,"src":"3606:17:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67691,"name":"address","nodeType":"ElementaryTypeName","src":"3606:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3481:148:121"},"returnParameters":{"id":67694,"nodeType":"ParameterList","parameters":[],"src":"3639:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67733,"nodeType":"FunctionDefinition","src":"4910:219:121","nodes":[],"body":{"id":67732,"nodeType":"Block","src":"5022:107:121","nodes":[],"statements":[{"assignments":[67720],"declarations":[{"constant":false,"id":67720,"mutability":"mutable","name":"opts","nameLocation":"5047:4:121","nodeType":"VariableDeclaration","scope":67732,"src":"5032:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67719,"nodeType":"UserDefinedTypeName","pathNode":{"id":67718,"name":"Options","nameLocations":["5032:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"5032:7:121"},"referencedDeclaration":68038,"src":"5032:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"id":67721,"nodeType":"VariableDeclarationStatement","src":"5032:19:121"},{"expression":{"arguments":[{"id":67725,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67709,"src":"5079:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67726,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67711,"src":"5086:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67727,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67713,"src":"5100:4:121","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":67728,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67720,"src":"5106:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}},{"id":67729,"name":"tryCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67715,"src":"5112:9:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67722,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"5061:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5066:12:121","memberName":"upgradeProxy","nodeType":"MemberAccess","referencedDeclaration":68143,"src":"5061:17:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_bytes_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,string memory,bytes memory,struct Options memory,address)"}},"id":67730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5061:61:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67731,"nodeType":"ExpressionStatement","src":"5061:61:121"}]},"documentation":{"id":67707,"nodeType":"StructuredDocumentation","src":"3723:1182:121","text":" @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n @dev Upgrades a proxy to a new implementation contract. Only supported for UUPS or transparent proxies.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n @param proxy Address of the proxy to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin."},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeProxy","nameLocation":"4919:12:121","parameters":{"id":67716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67709,"mutability":"mutable","name":"proxy","nameLocation":"4940:5:121","nodeType":"VariableDeclaration","scope":67733,"src":"4932:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67708,"name":"address","nodeType":"ElementaryTypeName","src":"4932:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67711,"mutability":"mutable","name":"contractName","nameLocation":"4961:12:121","nodeType":"VariableDeclaration","scope":67733,"src":"4947:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67710,"name":"string","nodeType":"ElementaryTypeName","src":"4947:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67713,"mutability":"mutable","name":"data","nameLocation":"4988:4:121","nodeType":"VariableDeclaration","scope":67733,"src":"4975:17:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":67712,"name":"bytes","nodeType":"ElementaryTypeName","src":"4975:5:121","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":67715,"mutability":"mutable","name":"tryCaller","nameLocation":"5002:9:121","nodeType":"VariableDeclaration","scope":67733,"src":"4994:17:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67714,"name":"address","nodeType":"ElementaryTypeName","src":"4994:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4931:81:121"},"returnParameters":{"id":67717,"nodeType":"ParameterList","parameters":[],"src":"5022:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67753,"nodeType":"FunctionDefinition","src":"5667:160:121","nodes":[],"body":{"id":67752,"nodeType":"Block","src":"5764:63:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67747,"name":"beacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67736,"src":"5793:6:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67748,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67738,"src":"5801:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67749,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67741,"src":"5815:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}],"expression":{"id":67744,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"5774:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5779:13:121","memberName":"upgradeBeacon","nodeType":"MemberAccess","referencedDeclaration":68314,"src":"5774:18:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$returns$__$","typeString":"function (address,string memory,struct Options memory)"}},"id":67750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5774:46:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67751,"nodeType":"ExpressionStatement","src":"5774:46:121"}]},"documentation":{"id":67734,"nodeType":"StructuredDocumentation","src":"5135:527:121","text":" @dev Upgrades a beacon to a new implementation contract.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n @param beacon Address of the beacon to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param opts Common options"},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeacon","nameLocation":"5676:13:121","parameters":{"id":67742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67736,"mutability":"mutable","name":"beacon","nameLocation":"5698:6:121","nodeType":"VariableDeclaration","scope":67753,"src":"5690:14:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67735,"name":"address","nodeType":"ElementaryTypeName","src":"5690:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67738,"mutability":"mutable","name":"contractName","nameLocation":"5720:12:121","nodeType":"VariableDeclaration","scope":67753,"src":"5706:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67737,"name":"string","nodeType":"ElementaryTypeName","src":"5706:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67741,"mutability":"mutable","name":"opts","nameLocation":"5749:4:121","nodeType":"VariableDeclaration","scope":67753,"src":"5734:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67740,"nodeType":"UserDefinedTypeName","pathNode":{"id":67739,"name":"Options","nameLocations":["5734:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"5734:7:121"},"referencedDeclaration":68038,"src":"5734:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"src":"5689:65:121"},"returnParameters":{"id":67743,"nodeType":"ParameterList","parameters":[],"src":"5764:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67774,"nodeType":"FunctionDefinition","src":"6331:168:121","nodes":[],"body":{"id":67773,"nodeType":"Block","src":"6407:92:121","nodes":[],"statements":[{"assignments":[67763],"declarations":[{"constant":false,"id":67763,"mutability":"mutable","name":"opts","nameLocation":"6432:4:121","nodeType":"VariableDeclaration","scope":67773,"src":"6417:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67762,"nodeType":"UserDefinedTypeName","pathNode":{"id":67761,"name":"Options","nameLocations":["6417:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"6417:7:121"},"referencedDeclaration":68038,"src":"6417:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"id":67764,"nodeType":"VariableDeclarationStatement","src":"6417:19:121"},{"expression":{"arguments":[{"id":67768,"name":"beacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67756,"src":"6465:6:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67769,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67758,"src":"6473:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67770,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67763,"src":"6487:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}],"expression":{"id":67765,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"6446:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6451:13:121","memberName":"upgradeBeacon","nodeType":"MemberAccess","referencedDeclaration":68314,"src":"6446:18:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$returns$__$","typeString":"function (address,string memory,struct Options memory)"}},"id":67771,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6446:46:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67772,"nodeType":"ExpressionStatement","src":"6446:46:121"}]},"documentation":{"id":67754,"nodeType":"StructuredDocumentation","src":"5833:493:121","text":" @dev Upgrades a beacon to a new implementation contract.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n @param beacon Address of the beacon to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory"},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeacon","nameLocation":"6340:13:121","parameters":{"id":67759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67756,"mutability":"mutable","name":"beacon","nameLocation":"6362:6:121","nodeType":"VariableDeclaration","scope":67774,"src":"6354:14:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67755,"name":"address","nodeType":"ElementaryTypeName","src":"6354:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67758,"mutability":"mutable","name":"contractName","nameLocation":"6384:12:121","nodeType":"VariableDeclaration","scope":67774,"src":"6370:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67757,"name":"string","nodeType":"ElementaryTypeName","src":"6370:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6353:44:121"},"returnParameters":{"id":67760,"nodeType":"ParameterList","parameters":[],"src":"6407:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67797,"nodeType":"FunctionDefinition","src":"7504:228:121","nodes":[],"body":{"id":67796,"nodeType":"Block","src":"7658:74:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67790,"name":"beacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67777,"src":"7687:6:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67791,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67779,"src":"7695:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67792,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67782,"src":"7709:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}},{"id":67793,"name":"tryCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67784,"src":"7715:9:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67787,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"7668:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7673:13:121","memberName":"upgradeBeacon","nodeType":"MemberAccess","referencedDeclaration":68337,"src":"7668:18:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,string memory,struct Options memory,address)"}},"id":67794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7668:57:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67795,"nodeType":"ExpressionStatement","src":"7668:57:121"}]},"documentation":{"id":67775,"nodeType":"StructuredDocumentation","src":"6505:994:121","text":" @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n @dev Upgrades a beacon to a new implementation contract.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n @param beacon Address of the beacon to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param opts Common options\n @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon."},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeacon","nameLocation":"7513:13:121","parameters":{"id":67785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67777,"mutability":"mutable","name":"beacon","nameLocation":"7544:6:121","nodeType":"VariableDeclaration","scope":67797,"src":"7536:14:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67776,"name":"address","nodeType":"ElementaryTypeName","src":"7536:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67779,"mutability":"mutable","name":"contractName","nameLocation":"7574:12:121","nodeType":"VariableDeclaration","scope":67797,"src":"7560:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67778,"name":"string","nodeType":"ElementaryTypeName","src":"7560:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67782,"mutability":"mutable","name":"opts","nameLocation":"7611:4:121","nodeType":"VariableDeclaration","scope":67797,"src":"7596:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67781,"nodeType":"UserDefinedTypeName","pathNode":{"id":67780,"name":"Options","nameLocations":["7596:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"7596:7:121"},"referencedDeclaration":68038,"src":"7596:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"},{"constant":false,"id":67784,"mutability":"mutable","name":"tryCaller","nameLocation":"7633:9:121","nodeType":"VariableDeclaration","scope":67797,"src":"7625:17:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67783,"name":"address","nodeType":"ElementaryTypeName","src":"7625:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7526:122:121"},"returnParameters":{"id":67786,"nodeType":"ParameterList","parameters":[],"src":"7658:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67821,"nodeType":"FunctionDefinition","src":"8703:198:121","nodes":[],"body":{"id":67820,"nodeType":"Block","src":"8798:103:121","nodes":[],"statements":[{"assignments":[67809],"declarations":[{"constant":false,"id":67809,"mutability":"mutable","name":"opts","nameLocation":"8823:4:121","nodeType":"VariableDeclaration","scope":67820,"src":"8808:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67808,"nodeType":"UserDefinedTypeName","pathNode":{"id":67807,"name":"Options","nameLocations":["8808:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"8808:7:121"},"referencedDeclaration":68038,"src":"8808:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"id":67810,"nodeType":"VariableDeclarationStatement","src":"8808:19:121"},{"expression":{"arguments":[{"id":67814,"name":"beacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67800,"src":"8856:6:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67815,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67802,"src":"8864:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67816,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67809,"src":"8878:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}},{"id":67817,"name":"tryCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67804,"src":"8884:9:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67811,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"8837:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8842:13:121","memberName":"upgradeBeacon","nodeType":"MemberAccess","referencedDeclaration":68337,"src":"8837:18:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_string_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,string memory,struct Options memory,address)"}},"id":67818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8837:57:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67819,"nodeType":"ExpressionStatement","src":"8837:57:121"}]},"documentation":{"id":67798,"nodeType":"StructuredDocumentation","src":"7738:960:121","text":" @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n @dev Upgrades a beacon to a new implementation contract.\n Requires that either the `referenceContract` option is set, or the new implementation contract has a `@custom:oz-upgrades-from <reference>` annotation.\n This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n @param beacon Address of the beacon to upgrade\n @param contractName Name of the new implementation contract to upgrade to, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon."},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeacon","nameLocation":"8712:13:121","parameters":{"id":67805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67800,"mutability":"mutable","name":"beacon","nameLocation":"8734:6:121","nodeType":"VariableDeclaration","scope":67821,"src":"8726:14:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67799,"name":"address","nodeType":"ElementaryTypeName","src":"8726:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67802,"mutability":"mutable","name":"contractName","nameLocation":"8756:12:121","nodeType":"VariableDeclaration","scope":67821,"src":"8742:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67801,"name":"string","nodeType":"ElementaryTypeName","src":"8742:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67804,"mutability":"mutable","name":"tryCaller","nameLocation":"8778:9:121","nodeType":"VariableDeclaration","scope":67821,"src":"8770:17:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67803,"name":"address","nodeType":"ElementaryTypeName","src":"8770:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8725:63:121"},"returnParameters":{"id":67806,"nodeType":"ParameterList","parameters":[],"src":"8798:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67838,"nodeType":"FunctionDefinition","src":"9398:140:121","nodes":[],"body":{"id":67837,"nodeType":"Block","src":"9481:57:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67833,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67824,"src":"9512:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67834,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67827,"src":"9526:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}],"expression":{"id":67830,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"9491:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9496:15:121","memberName":"validateUpgrade","nodeType":"MemberAccess","referencedDeclaration":68428,"src":"9491:20:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$returns$__$","typeString":"function (string memory,struct Options memory)"}},"id":67835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9491:40:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67836,"nodeType":"ExpressionStatement","src":"9491:40:121"}]},"documentation":{"id":67822,"nodeType":"StructuredDocumentation","src":"8907:486:121","text":" @dev Validates a new implementation contract in comparison with a reference contract, but does not deploy it.\n Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n @param contractName Name of the contract to validate, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param opts Common options"},"implemented":true,"kind":"function","modifiers":[],"name":"validateUpgrade","nameLocation":"9407:15:121","parameters":{"id":67828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67824,"mutability":"mutable","name":"contractName","nameLocation":"9437:12:121","nodeType":"VariableDeclaration","scope":67838,"src":"9423:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67823,"name":"string","nodeType":"ElementaryTypeName","src":"9423:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67827,"mutability":"mutable","name":"opts","nameLocation":"9466:4:121","nodeType":"VariableDeclaration","scope":67838,"src":"9451:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67826,"nodeType":"UserDefinedTypeName","pathNode":{"id":67825,"name":"Options","nameLocations":["9451:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"9451:7:121"},"referencedDeclaration":68038,"src":"9451:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"src":"9422:49:121"},"returnParameters":{"id":67829,"nodeType":"ParameterList","parameters":[],"src":"9481:0:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67856,"nodeType":"FunctionDefinition","src":"10300:163:121","nodes":[],"body":{"id":67855,"nodeType":"Block","src":"10400:63:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67851,"name":"contractName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67841,"src":"10437:12:121","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":67852,"name":"opts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67844,"src":"10451:4:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options memory"}],"expression":{"id":67849,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"10417:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10422:14:121","memberName":"prepareUpgrade","nodeType":"MemberAccess","referencedDeclaration":68452,"src":"10417:19:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_string_memory_ptr_$_t_struct$_Options_$68038_memory_ptr_$returns$_t_address_$","typeString":"function (string memory,struct Options memory) returns (address)"}},"id":67853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10417:39:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":67848,"id":67854,"nodeType":"Return","src":"10410:46:121"}]},"documentation":{"id":67839,"nodeType":"StructuredDocumentation","src":"9544:751:121","text":" @dev Validates a new implementation contract in comparison with a reference contract, deploys the new implementation contract,\n and returns its address.\n Requires that either the `referenceContract` option is set, or the contract has a `@custom:oz-upgrades-from <reference>` annotation.\n Use this method to prepare an upgrade to be run from an admin address you do not control directly or cannot use from your deployment environment.\n @param contractName Name of the contract to deploy, e.g. \"MyContract.sol\" or \"MyContract.sol:MyContract\" or artifact path relative to the project root directory\n @param opts Common options\n @return Address of the new implementation contract"},"implemented":true,"kind":"function","modifiers":[],"name":"prepareUpgrade","nameLocation":"10309:14:121","parameters":{"id":67845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67841,"mutability":"mutable","name":"contractName","nameLocation":"10338:12:121","nodeType":"VariableDeclaration","scope":67856,"src":"10324:26:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":67840,"name":"string","nodeType":"ElementaryTypeName","src":"10324:6:121","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":67844,"mutability":"mutable","name":"opts","nameLocation":"10367:4:121","nodeType":"VariableDeclaration","scope":67856,"src":"10352:19:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_memory_ptr","typeString":"struct Options"},"typeName":{"id":67843,"nodeType":"UserDefinedTypeName","pathNode":{"id":67842,"name":"Options","nameLocations":["10352:7:121"],"nodeType":"IdentifierPath","referencedDeclaration":68038,"src":"10352:7:121"},"referencedDeclaration":68038,"src":"10352:7:121","typeDescriptions":{"typeIdentifier":"t_struct$_Options_$68038_storage_ptr","typeString":"struct Options"}},"visibility":"internal"}],"src":"10323:49:121"},"returnParameters":{"id":67848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67847,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67856,"src":"10391:7:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67846,"name":"address","nodeType":"ElementaryTypeName","src":"10391:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10390:9:121"},"scope":67899,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67870,"nodeType":"FunctionDefinition","src":"10667:123:121","nodes":[],"body":{"id":67869,"nodeType":"Block","src":"10739:51:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67866,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67859,"src":"10777:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67864,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"10756:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10761:15:121","memberName":"getAdminAddress","nodeType":"MemberAccess","referencedDeclaration":68488,"src":"10756:20:121","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":67867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10756:27:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":67863,"id":67868,"nodeType":"Return","src":"10749:34:121"}]},"documentation":{"id":67857,"nodeType":"StructuredDocumentation","src":"10469:193:121","text":" @dev Gets the admin address of a transparent proxy from its ERC1967 admin storage slot.\n @param proxy Address of a transparent proxy\n @return Admin address"},"implemented":true,"kind":"function","modifiers":[],"name":"getAdminAddress","nameLocation":"10676:15:121","parameters":{"id":67860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67859,"mutability":"mutable","name":"proxy","nameLocation":"10700:5:121","nodeType":"VariableDeclaration","scope":67870,"src":"10692:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67858,"name":"address","nodeType":"ElementaryTypeName","src":"10692:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10691:15:121"},"returnParameters":{"id":67863,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67870,"src":"10730:7:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67861,"name":"address","nodeType":"ElementaryTypeName","src":"10730:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10729:9:121"},"scope":67899,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":67884,"nodeType":"FunctionDefinition","src":"11037:141:121","nodes":[],"body":{"id":67883,"nodeType":"Block","src":"11118:60:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67880,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67873,"src":"11165:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67878,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"11135:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11140:24:121","memberName":"getImplementationAddress","nodeType":"MemberAccess","referencedDeclaration":68524,"src":"11135:29:121","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":67881,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11135:36:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":67877,"id":67882,"nodeType":"Return","src":"11128:43:121"}]},"documentation":{"id":67871,"nodeType":"StructuredDocumentation","src":"10796:236:121","text":" @dev Gets the implementation address of a transparent or UUPS proxy from its ERC1967 implementation storage slot.\n @param proxy Address of a transparent or UUPS proxy\n @return Implementation address"},"implemented":true,"kind":"function","modifiers":[],"name":"getImplementationAddress","nameLocation":"11046:24:121","parameters":{"id":67874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67873,"mutability":"mutable","name":"proxy","nameLocation":"11079:5:121","nodeType":"VariableDeclaration","scope":67884,"src":"11071:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67872,"name":"address","nodeType":"ElementaryTypeName","src":"11071:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11070:15:121"},"returnParameters":{"id":67877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67884,"src":"11109:7:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67875,"name":"address","nodeType":"ElementaryTypeName","src":"11109:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11108:9:121"},"scope":67899,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":67898,"nodeType":"FunctionDefinition","src":"11375:125:121","nodes":[],"body":{"id":67897,"nodeType":"Block","src":"11448:52:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67894,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67887,"src":"11487:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67892,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"11465:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11470:16:121","memberName":"getBeaconAddress","nodeType":"MemberAccess","referencedDeclaration":68560,"src":"11465:21:121","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":67895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11465:28:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":67891,"id":67896,"nodeType":"Return","src":"11458:35:121"}]},"documentation":{"id":67885,"nodeType":"StructuredDocumentation","src":"11184:186:121","text":" @dev Gets the beacon address of a beacon proxy from its ERC1967 beacon storage slot.\n @param proxy Address of a beacon proxy\n @return Beacon address"},"implemented":true,"kind":"function","modifiers":[],"name":"getBeaconAddress","nameLocation":"11384:16:121","parameters":{"id":67888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67887,"mutability":"mutable","name":"proxy","nameLocation":"11409:5:121","nodeType":"VariableDeclaration","scope":67898,"src":"11401:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67886,"name":"address","nodeType":"ElementaryTypeName","src":"11401:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11400:15:121"},"returnParameters":{"id":67891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67898,"src":"11439:7:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67889,"name":"address","nodeType":"ElementaryTypeName","src":"11439:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11438:9:121"},"scope":67899,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"Upgrades","contractDependencies":[],"contractKind":"library","documentation":{"id":67633,"nodeType":"StructuredDocumentation","src":"149:244:121","text":" @dev Library for managing upgradeable contracts from Forge scripts or tests.\n NOTE: Only for upgrading existing deployments using OpenZeppelin Contracts v4.\n For new deployments, use OpenZeppelin Contracts v5 and Upgrades.sol."},"fullyImplemented":true,"linearizedBaseContracts":[67899],"name":"Upgrades","nameLocation":"402:8:121","scope":68020,"usedErrors":[],"usedEvents":[]},{"id":68019,"nodeType":"ContractDefinition","src":"12259:3937:121","nodes":[{"id":67919,"nodeType":"FunctionDefinition","src":"12721:140:121","nodes":[],"body":{"id":67918,"nodeType":"Block","src":"12803:58:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67913,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67903,"src":"12833:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67914,"name":"newImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67905,"src":"12840:7:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67915,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67907,"src":"12849:4:121","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":67910,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"12813:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12818:14:121","memberName":"upgradeProxyTo","nodeType":"MemberAccess","referencedDeclaration":68268,"src":"12813:19:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,bytes memory)"}},"id":67916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12813:41:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67917,"nodeType":"ExpressionStatement","src":"12813:41:121"}]},"documentation":{"id":67901,"nodeType":"StructuredDocumentation","src":"12288:428:121","text":" @dev Upgrades a proxy to a new implementation contract address. Only supported for UUPS or transparent proxies.\n @param proxy Address of the proxy to upgrade\n @param newImpl Address of the new implementation contract to upgrade to\n @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade"},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeProxy","nameLocation":"12730:12:121","parameters":{"id":67908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67903,"mutability":"mutable","name":"proxy","nameLocation":"12751:5:121","nodeType":"VariableDeclaration","scope":67919,"src":"12743:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67902,"name":"address","nodeType":"ElementaryTypeName","src":"12743:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67905,"mutability":"mutable","name":"newImpl","nameLocation":"12766:7:121","nodeType":"VariableDeclaration","scope":67919,"src":"12758:15:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67904,"name":"address","nodeType":"ElementaryTypeName","src":"12758:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67907,"mutability":"mutable","name":"data","nameLocation":"12788:4:121","nodeType":"VariableDeclaration","scope":67919,"src":"12775:17:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":67906,"name":"bytes","nodeType":"ElementaryTypeName","src":"12775:5:121","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12742:51:121"},"returnParameters":{"id":67909,"nodeType":"ParameterList","parameters":[],"src":"12803:0:121"},"scope":68019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67941,"nodeType":"FunctionDefinition","src":"13784:170:121","nodes":[],"body":{"id":67940,"nodeType":"Block","src":"13885:69:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67934,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67922,"src":"13915:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67935,"name":"newImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67924,"src":"13922:7:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67936,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67926,"src":"13931:4:121","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":67937,"name":"tryCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67928,"src":"13937:9:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67931,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"13895:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13900:14:121","memberName":"upgradeProxyTo","nodeType":"MemberAccess","referencedDeclaration":68290,"src":"13895:19:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bytes_memory_ptr_$_t_address_$returns$__$","typeString":"function (address,address,bytes memory,address)"}},"id":67938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13895:52:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67939,"nodeType":"ExpressionStatement","src":"13895:52:121"}]},"documentation":{"id":67920,"nodeType":"StructuredDocumentation","src":"12867:912:121","text":" @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n @dev Upgrades a proxy to a new implementation contract address. Only supported for UUPS or transparent proxies.\n This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n @param proxy Address of the proxy to upgrade\n @param newImpl Address of the new implementation contract to upgrade to\n @param data Encoded call data of an arbitrary function to call during the upgrade process, or empty if no function needs to be called during the upgrade\n @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the proxy or its ProxyAdmin."},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeProxy","nameLocation":"13793:12:121","parameters":{"id":67929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67922,"mutability":"mutable","name":"proxy","nameLocation":"13814:5:121","nodeType":"VariableDeclaration","scope":67941,"src":"13806:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67921,"name":"address","nodeType":"ElementaryTypeName","src":"13806:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67924,"mutability":"mutable","name":"newImpl","nameLocation":"13829:7:121","nodeType":"VariableDeclaration","scope":67941,"src":"13821:15:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67923,"name":"address","nodeType":"ElementaryTypeName","src":"13821:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67926,"mutability":"mutable","name":"data","nameLocation":"13851:4:121","nodeType":"VariableDeclaration","scope":67941,"src":"13838:17:121","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":67925,"name":"bytes","nodeType":"ElementaryTypeName","src":"13838:5:121","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":67928,"mutability":"mutable","name":"tryCaller","nameLocation":"13865:9:121","nodeType":"VariableDeclaration","scope":67941,"src":"13857:17:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67927,"name":"address","nodeType":"ElementaryTypeName","src":"13857:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13805:70:121"},"returnParameters":{"id":67930,"nodeType":"ParameterList","parameters":[],"src":"13885:0:121"},"scope":68019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67957,"nodeType":"FunctionDefinition","src":"14188:119:121","nodes":[],"body":{"id":67956,"nodeType":"Block","src":"14253:54:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67952,"name":"beacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67944,"src":"14284:6:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67953,"name":"newImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67946,"src":"14292:7:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67949,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"14263:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14268:15:121","memberName":"upgradeBeaconTo","nodeType":"MemberAccess","referencedDeclaration":68353,"src":"14263:20:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":67954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14263:37:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67955,"nodeType":"ExpressionStatement","src":"14263:37:121"}]},"documentation":{"id":67942,"nodeType":"StructuredDocumentation","src":"13960:223:121","text":" @dev Upgrades a beacon to a new implementation contract address.\n @param beacon Address of the beacon to upgrade\n @param newImpl Address of the new implementation contract to upgrade to"},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeacon","nameLocation":"14197:13:121","parameters":{"id":67947,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67944,"mutability":"mutable","name":"beacon","nameLocation":"14219:6:121","nodeType":"VariableDeclaration","scope":67957,"src":"14211:14:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67943,"name":"address","nodeType":"ElementaryTypeName","src":"14211:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67946,"mutability":"mutable","name":"newImpl","nameLocation":"14235:7:121","nodeType":"VariableDeclaration","scope":67957,"src":"14227:15:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67945,"name":"address","nodeType":"ElementaryTypeName","src":"14227:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14210:33:121"},"returnParameters":{"id":67948,"nodeType":"ParameterList","parameters":[],"src":"14253:0:121"},"scope":68019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67976,"nodeType":"FunctionDefinition","src":"15008:149:121","nodes":[],"body":{"id":67975,"nodeType":"Block","src":"15092:65:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67970,"name":"beacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67960,"src":"15123:6:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67971,"name":"newImpl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67962,"src":"15131:7:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":67972,"name":"tryCaller","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67964,"src":"15140:9:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67967,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"15102:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15107:15:121","memberName":"upgradeBeaconTo","nodeType":"MemberAccess","referencedDeclaration":68372,"src":"15102:20:121","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$returns$__$","typeString":"function (address,address,address)"}},"id":67973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15102:48:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":67974,"nodeType":"ExpressionStatement","src":"15102:48:121"}]},"documentation":{"id":67958,"nodeType":"StructuredDocumentation","src":"14313:690:121","text":" @notice For tests only. If broadcasting in scripts, use the `--sender <ADDRESS>` option with `forge script` instead.\n @dev Upgrades a beacon to a new implementation contract address.\n This function provides an additional `tryCaller` parameter to test an upgrade using a specific caller address.\n Use this if you encounter `OwnableUnauthorizedAccount` errors in your tests.\n @param beacon Address of the beacon to upgrade\n @param newImpl Address of the new implementation contract to upgrade to\n @param tryCaller Address to use as the caller of the upgrade function. This should be the address that owns the beacon."},"implemented":true,"kind":"function","modifiers":[],"name":"upgradeBeacon","nameLocation":"15017:13:121","parameters":{"id":67965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67960,"mutability":"mutable","name":"beacon","nameLocation":"15039:6:121","nodeType":"VariableDeclaration","scope":67976,"src":"15031:14:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67959,"name":"address","nodeType":"ElementaryTypeName","src":"15031:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67962,"mutability":"mutable","name":"newImpl","nameLocation":"15055:7:121","nodeType":"VariableDeclaration","scope":67976,"src":"15047:15:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67961,"name":"address","nodeType":"ElementaryTypeName","src":"15047:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":67964,"mutability":"mutable","name":"tryCaller","nameLocation":"15072:9:121","nodeType":"VariableDeclaration","scope":67976,"src":"15064:17:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67963,"name":"address","nodeType":"ElementaryTypeName","src":"15064:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15030:52:121"},"returnParameters":{"id":67966,"nodeType":"ParameterList","parameters":[],"src":"15092:0:121"},"scope":68019,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":67990,"nodeType":"FunctionDefinition","src":"15361:123:121","nodes":[],"body":{"id":67989,"nodeType":"Block","src":"15433:51:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":67986,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67979,"src":"15471:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67984,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"15450:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15455:15:121","memberName":"getAdminAddress","nodeType":"MemberAccess","referencedDeclaration":68488,"src":"15450:20:121","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":67987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15450:27:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":67983,"id":67988,"nodeType":"Return","src":"15443:34:121"}]},"documentation":{"id":67977,"nodeType":"StructuredDocumentation","src":"15163:193:121","text":" @dev Gets the admin address of a transparent proxy from its ERC1967 admin storage slot.\n @param proxy Address of a transparent proxy\n @return Admin address"},"implemented":true,"kind":"function","modifiers":[],"name":"getAdminAddress","nameLocation":"15370:15:121","parameters":{"id":67980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67979,"mutability":"mutable","name":"proxy","nameLocation":"15394:5:121","nodeType":"VariableDeclaration","scope":67990,"src":"15386:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67978,"name":"address","nodeType":"ElementaryTypeName","src":"15386:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15385:15:121"},"returnParameters":{"id":67983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67982,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":67990,"src":"15424:7:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67981,"name":"address","nodeType":"ElementaryTypeName","src":"15424:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15423:9:121"},"scope":68019,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":68004,"nodeType":"FunctionDefinition","src":"15731:141:121","nodes":[],"body":{"id":68003,"nodeType":"Block","src":"15812:60:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":68000,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":67993,"src":"15859:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":67998,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"15829:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":67999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15834:24:121","memberName":"getImplementationAddress","nodeType":"MemberAccess","referencedDeclaration":68524,"src":"15829:29:121","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":68001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15829:36:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":67997,"id":68002,"nodeType":"Return","src":"15822:43:121"}]},"documentation":{"id":67991,"nodeType":"StructuredDocumentation","src":"15490:236:121","text":" @dev Gets the implementation address of a transparent or UUPS proxy from its ERC1967 implementation storage slot.\n @param proxy Address of a transparent or UUPS proxy\n @return Implementation address"},"implemented":true,"kind":"function","modifiers":[],"name":"getImplementationAddress","nameLocation":"15740:24:121","parameters":{"id":67994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67993,"mutability":"mutable","name":"proxy","nameLocation":"15773:5:121","nodeType":"VariableDeclaration","scope":68004,"src":"15765:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67992,"name":"address","nodeType":"ElementaryTypeName","src":"15765:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15764:15:121"},"returnParameters":{"id":67997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":67996,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":68004,"src":"15803:7:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":67995,"name":"address","nodeType":"ElementaryTypeName","src":"15803:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"15802:9:121"},"scope":68019,"stateMutability":"view","virtual":false,"visibility":"internal"},{"id":68018,"nodeType":"FunctionDefinition","src":"16069:125:121","nodes":[],"body":{"id":68017,"nodeType":"Block","src":"16142:52:121","nodes":[],"statements":[{"expression":{"arguments":[{"id":68014,"name":"proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68007,"src":"16181:5:121","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":68012,"name":"Core","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":69052,"src":"16159:4:121","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Core_$69052_$","typeString":"type(library Core)"}},"id":68013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16164:16:121","memberName":"getBeaconAddress","nodeType":"MemberAccess","referencedDeclaration":68560,"src":"16159:21:121","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_address_$","typeString":"function (address) view returns (address)"}},"id":68015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16159:28:121","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":68011,"id":68016,"nodeType":"Return","src":"16152:35:121"}]},"documentation":{"id":68005,"nodeType":"StructuredDocumentation","src":"15878:186:121","text":" @dev Gets the beacon address of a beacon proxy from its ERC1967 beacon storage slot.\n @param proxy Address of a beacon proxy\n @return Beacon address"},"implemented":true,"kind":"function","modifiers":[],"name":"getBeaconAddress","nameLocation":"16078:16:121","parameters":{"id":68008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68007,"mutability":"mutable","name":"proxy","nameLocation":"16103:5:121","nodeType":"VariableDeclaration","scope":68018,"src":"16095:13:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":68006,"name":"address","nodeType":"ElementaryTypeName","src":"16095:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16094:15:121"},"returnParameters":{"id":68011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":68010,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":68018,"src":"16133:7:121","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":68009,"name":"address","nodeType":"ElementaryTypeName","src":"16133:7:121","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"16132:9:121"},"scope":68019,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"UnsafeUpgrades","contractDependencies":[],"contractKind":"library","documentation":{"id":67900,"nodeType":"StructuredDocumentation","src":"11504:754:121","text":" @dev Library for managing upgradeable contracts from Forge tests, without validations.\n Can be used with `forge coverage`. Requires implementation contracts to be instantiated first.\n Does not require `--ffi` and does not require a clean compilation before each run.\n Not supported for OpenZeppelin Defender deployments.\n WARNING: Not recommended for use in Forge scripts.\n `UnsafeUpgrades` does not validate whether your contracts are upgrade safe or whether new implementations are compatible with previous ones.\n Use `Upgrades` if you want validations to be run.\n NOTE: Only for upgrading existing deployments using OpenZeppelin Contracts v4.\n For new deployments, use OpenZeppelin Contracts v5 and Upgrades.sol."},"fullyImplemented":true,"linearizedBaseContracts":[68019],"name":"UnsafeUpgrades","nameLocation":"12267:14:121","scope":68020,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":121}