/* THIS FILE IS THE OLD MIGRATIONS FILE BEFORE RE-WRITING IT FOR BACKUP PURPOSES */
/* IT'S AN ALL-IN-ONE-MIGRATIONS FILE */

const Web3 = require('web3');
const EthereumTx = require('ethereumjs-tx');

const MorpherState = artifacts.require("MorpherState");
const MorpherToken = artifacts.require("MorpherToken");
const MorpherTradeEngine = artifacts.require("MorpherTradeEngine");
const MorpherBridge = artifacts.require("MorpherBridge");
const MorpherGovernance = artifacts.require("MorpherGovernance");
const MorpherAirdrop = artifacts.require("MorpherAirdrop");
const MorpherEscrow = artifacts.require("MorpherEscrow");
const MorpherOracle = artifacts.require("MorpherOracle");

const CRYPTO_BTC = '0x0bc89e95f9fdaab7e8a11719155f2fd638cb0f665623f3d12aab71d1a125daf9';
const CRYPTO_ETH = '0x5376ff169a3705b2003892fe730060ee74ec83e5701da29318221aa782271779';

module.exports = async function(deployer, network, accounts) {
    let web3;

    const deployerAddress = process.env.MORPHER_DEPLOYER;
    const deployerKey = Buffer.from(process.env.MORPHER_DEPLOYER_KEY, 'hex');

    let ownerAddress = process.env.MORPHER_OWNER;
    let treasuryAddress = process.env.MORPHER_TREASURY;
    let administratorAddress = process.env.MORPHER_ADMINISTRATOR;
    let callbackAddress = process.env.CALLBACK_ADDRESS;
    let gasCollectionAddress = process.env.GAS_COLLECTION;
    let sidechainOperatorAddress = process.env.SIDECHAIN_OPERATOR;
    let airdropAdminAddress = process.env.AIRDROP_ADMIN;

    if(network === 'local'){
        web3 = new Web3('http://127.0.0.1:7545');
        ownerAddress = deployerAddress;
        treasuryAddress = deployerAddress;
        administratorAddress = deployerAddress;
        callbackAddress = deployerAddress;
        gasCollectionAddress = deployerAddress;
        sidechainOperatorAddress = deployerAddress;
        airdropAdminAddress = deployerAddress
    }

    await deployer.deploy(MorpherState, true, sidechainOperatorAddress, deployerAddress); // deployer is changed to owner later
    await deployer.deploy(MorpherToken, MorpherState.address, deployerAddress); // deployer is changed to owner later
    await deployer.deploy(MorpherTradeEngine, MorpherState.address, ownerAddress);
    await deployer.deploy(MorpherBridge, MorpherState.address, ownerAddress);
    await deployer.deploy(MorpherGovernance, MorpherState.address, ownerAddress);
    await deployer.deploy(MorpherAirdrop, airdropAdminAddress, MorpherToken.address, ownerAddress);
    await deployer.deploy(MorpherEscrow, treasuryAddress, MorpherToken.address, ownerAddress);
    await deployer.deploy(MorpherOracle, MorpherTradeEngine.address, callbackAddress, gasCollectionAddress, 0, deployerAddress); // deployer is changed to owner later

    if(network === 'local'){
        let data;
        
        const morpherState = new web3.eth.Contract(MorpherState.abi, MorpherState.address);

        // ------ MorpherStateBeta ------
        // grantAccess(morpherTokenAddress)
        // grantAccess(morpherTradeEngineAddress)
        // grantAccess(morpherBridgeAddress)
        // grantAccess(morpherGovernanceAddress)
        // setSideChainOperator(sideChainOperatorAddress)
        data = await morpherState.methods.grantAccess(MorpherToken.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Access granted to MorpherToken.');

        data = await morpherState.methods.grantAccess(MorpherTradeEngine.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Access granted to MorpherTradeEngine.');

        data = await morpherState.methods.grantAccess(MorpherBridge.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Access granted to MorpherBridge.');

        data = await morpherState.methods.grantAccess(MorpherGovernance.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Access granted to MorpherGovernance.');

        data = await morpherState.methods.grantAccess(deployerAddress);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Access granted to MorpherGovernance.');

        data = await morpherState.methods.setSideChainOperator(deployerAddress);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('SidechainOperator set.');

        // ------ Only relevant on sidechain ------
        // enableTransfers(addressOfDeployer)
        // enableTransfers(morpherAirdropAddress)
        data = await morpherState.methods.enableTransfers(deployerAddress);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Transfers enabled for deployerAddress.');

        data = await morpherState.methods.enableTransfers(MorpherAirdrop.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Transfers enabled for MorpherAirdrop.');

        // ------ To have an Administrator and Oracle until there is a vote in the governance contract ------
        // setGovernanceContract(addressOfDeployer)
        // setAdministrator(addressOfDeployer)
        data = await morpherState.methods.setGovernanceContract(deployerAddress);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('GovernanceContract set.');
        
        data = await morpherState.methods.setAdministrator(deployerAddress);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Administrator set.');

        // ------ Set protocol contracts in state ------
        // setTokenContract(morpherTokenAddress)
        // setMorpherBridge(bridgeAddress)
        // setOracleContract(oracleAddress)
        data = await morpherState.methods.setTokenContract(MorpherToken.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('MorpherToken set.');

        data = await morpherState.methods.setMorpherBridge(MorpherBridge.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('MorpherBridge set.');

        data = await morpherState.methods.setOracleContract(MorpherOracle.address);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('MorpherOracle set.');

        // ------ Enable "CRYPTO_BTC" and "CRYPTO_ETH" as markets for testing purposes ------
        data = await morpherState.methods.activateMarket(CRYPTO_BTC);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('CRYPTO_BTC market enabled.');

        data = await morpherState.methods.activateMarket(CRYPTO_ETH);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('CRYPTO_ETH market enabled.');

        // ------ MorpherState: set Governance properly ------
        // ONLY MAIN CHAIN: setGovernanceContract(morpherGovernanceAddress)
        // transferOwnership(ownerAddress)
        data = await morpherState.methods.transferOwnership(ownerAddress);
        await sendTransactionFrom(deployerAddress, data, deployerKey, MorpherState.address);
        console.log('Ownership transferred to ownerAddress.');
    }   
};


// Helper function to parse and send transactions to the blockchain.
async function sendTransactionFrom(account, data, privateKey, contractAddress) {
    const nonce = await web3.eth.getTransactionCount(account);

    const transactionData = {
        nonce,
        from: account,
        to: contractAddress,
        gasLimit: 8000000,
        gasPrice: 1000000000,
        data: data.encodeABI()
    };

    const tx = new EthereumTx(transactionData);

    /**
     * Signing the transaction
     * */
    tx.sign(privateKey);
    const raw = '0x' + tx.serialize().toString('hex');
    return await web3.eth.sendSignedTransaction(raw);
}
